/*
    ChibiOS/RT - Copyright (C) 2009 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

                                      ---

    A special exception to the GPL can be applied should you wish to distribute
    a combined work that includes ChibiOS/RT, without being obliged to provide
    the source code for any proprietary components. See the file exception.txt
    for full details of how and when the exception can be applied.
*/
/** @} */

/**
 * @defgroup ARM7_CONF Configuration Options
 * @{
 * @brief ARM7 specific configuration options.
 * @details The ARM7 port allows some architecture-specific configurations
 * settings that can be specified externally, as example on the compiler
 * command line:
 * - @p INT_REQUIRED_STACK, this value represent the amount of stack space used
 *   by an interrupt handler between the @p extctx and @p intctx
 *   structures.<br>
 *   In practice this value is the stack space used by the chSchDoReschedule()
 *   stack frame.<br>
 *   This value can be affected by a variety of external things like compiler
 *   version, compiler options, kernel settings (speed/size) and so on.<br>
 *   The default for this value is @p 0x10 which should be a safe value, you
 *   can trim this down by defining the macro externally. This would save
 *   some valuable RAM space for each thread present in the system.<br>
 *   The default value is set into <b>./ports/ARM7/chcore.h</b>.
 *
 * @ingroup ARM7
 */
/** @} */

/**
 * @defgroup ARM7_CORE Core Port Implementation
 * @{
 * @brief ARM7 specific port code, structures and macros.
 *
 * @ingroup ARM7
 * @file ports/ARM7/chtypes.h Port types.
 * @file ports/ARM7/chcore.h Port related structures and macros.
 * @file ports/ARM7/chcore.c Port related code.
 */
/** @} */

/**
 * @defgroup ARM7_STARTUP Startup Support
 * @{
 * @brief ARM7 startup code support.
 * @details ChibiOS/RT provides its own generic startup file for the ARM7 port.
 * Of course it is not mandatory to use it but care should be taken about the
 * startup phase details.
 *
 * <h2>Startup Process</h2>
 * The startup process, as implemented, is the following:
 * -# The stacks are initialized by assigning them the sizes defined in the
 *    linker script (usually named @p ch.ld). Stack areas are allocated from
 *    the highest RAM location downward.
 * -# The ARM state is switched to System with both IRQ and FIQ sources
 *    disabled.
 * -# An early initialization routine @p hwinit0 is invoked, if the symbol is
 *    not defined then an empty default routine is executed (weak symbol).
 * -# DATA and BSS segments are initialized.
 * -# A late initialization routine @p hwinit1 is invoked, if the symbol not
 *    defined then an empty default routine is executed (weak symbol).<br>
 *    This late initialization function is also the proper place for a
 *    @a bootloader, if your application requires one.
 * -# The @p main() function is invoked with the parameters @p argc and @p argv
 *    set to zero.
 * -# Should the @p main() function return a branch is performed to the weak
 *    symbol MainExitHandler. The default code is an endless empty loop.
 * .
 * <h2>Expected linker symbols</h2>
 * The startup code starts at the symbol @p ResetHandler and expects the
 * following symbols to be defined in the linker script:
 * - @p __ram_end__ RAM end location +1.
 * - @p __und_stack_size__ Undefined Instruction stack size.
 * - @p __abt_stack_size__ Memory Abort stack size.
 * - @p __fiq_stack_size__ FIQ service stack size.
 * - @p __irq_stack_size__ IRQ service stack size.
 * - @p __svc_stack_size__ SVC service stack size.
 * - @p __sys_stack_size__ System/User stack size. This is the stack area used
 *      by the @p main() function.
 * - @p _textdata address of the data segment source read only data.
 * - @p _data data segment start location.
 * - @p _edata data segment end location +1.
 * - @p _bss_start BSS start location.
 * - @p _bss_end BSS end location +1.
 * .
 * @ingroup ARM7
 * @file ports/ARM7/crt0.s Startup code.
 */
/** @} */
