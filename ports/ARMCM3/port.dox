/*
    ChibiOS/RT - Copyright (C) 2009 Giovanni Di Sirio.

    This file is part of ChibiOS/RT.

    ChibiOS/RT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    ChibiOS/RT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

                                      ---

    A special exception to the GPL can be applied should you wish to distribute
    a combined work that includes ChibiOS/RT, without being obliged to provide
    the source code for any proprietary components. See the file exception.txt
    for full details of how and when the exception can be applied.
*/
/** @} */

/**
 * @defgroup ARMCM3_CONF Configuration Options
 * @{
 * @brief ARM Cortex-M3 Configuration Options.
 * @details The ARMCM3 port allows some architecture-specific configurations
 * settings that can be specified externally, as example on the compiler
 * command line:
 * - @p INT_REQUIRED_STACK, this value represent the amount of stack space used
 *   by an interrupt handler between the @p extctx and @p intctx
 *   structures.<br>
 *   In the current implementation this value is guaranteed to be zero so
 *   there is no need to modify this value unless changes are done at the
 *   interrupts handling code.
 * - @p BASEPRI_USER, this is the @p BASEPRI value for the user threads. The
 *   default value is @p 0 (disabled).<br>
 *   Usually there is no need to change this value, please refer to the
 *   Cortex-M3 technical reference manual for a detailed description.
 * - @p BASEPRI_KERNEL, this is the @p BASEPRI value for the kernel lock code.
 *   The default value is 0x40.<br>
 *   Code running at higher priority levels must not invoke any OS API.<br>
 *   Usually there is no need to change this value, please refer to the
 *   Cortex-M3 technical reference manual for a detailed description.
 * - @p ENABLE_WFI_IDLE, if set to @p 1 enables the use of the @p <b>wfi</b>
 *   instruction from within the idle loop. This is defaulted to 0 because
 *   it can create problems with some debuggers. Setting this option to 1
 *   reduces the system power requirements.
 *
 * @ingroup ARMCM3
 */
/** @} */

/**
 * @defgroup ARMCM3_CORE Core Port Implementation
 * @{
 * @brief ARM Cortex-M3 specific port code, structures and macros.
 *
 * @ingroup ARMCM3
 */
/** @} */

/**
 * @defgroup ARMCM3_STARTUP Startup Support
 * @{
 * @brief ARM Cortex-M3 startup code support.
 * @details ChibiOS/RT provides its own generic startup file for the ARM
 * Cortex-M3 port.
 * Of course it is not mandatory to use it but care should be taken about the
 * startup phase details.
 *
 * <h2>Startup Process</h2>
 * The startup process, as implemented, is the following:
 * -# Interrupts are masked globally.
 * -# The two stacks are initialized by assigning them the sizes defined in the
 *    linker script (usually named @p ch.ld). Stack areas are allocated from
 *    the highest RAM location downward.
 * -# An early initialization routine @p hwinit0 is invoked, if the symbol is
 *    not defined then an empty default routine is executed (weak symbol).
 * -# DATA and BSS segments are initialized.
 * -# The CPU state is switched to Privileged and the PSP stack is used.
 * -# A late initialization routine @p hwinit1 is invoked, if the symbol not
 *    defined then an empty default routine is executed (weak symbol).<br>
 *    This late initialization function is also the proper place for a
 *    @a bootloader, if your application requires one.
 * -# The @p main() function is invoked with the parameters @p argc and @p argv
 *    set to zero.
 * -# Should the @p main() function return a branch is performed to the weak
 *    symbol MainExitHandler. The default code is an endless empty loop.
 * .
 * <h2>Expected linker symbols</h2>
 * The startup code starts at the symbol @p ResetHandler and expects the
 * following symbols to be defined in the linker script:
 * - @p __ram_end__ RAM end location +1.
 * - @p __main_stack_size__ Exception stack size.
 * - @p __process_stack_size__ Process stack size. This is the stack area used
 *      by the @p main() function.
 * - @p _textdata address of the data segment source read only data.
 * - @p _data data segment start location.
 * - @p _edata data segment end location +1.
 * - @p _bss_start BSS start location.
 * - @p _bss_end BSS end location +1.
 * .
 * @ingroup ARMCM3
 * @file ports/ARMCM3/crt0.s Startup code.
 */
/** @} */

/**
 * @defgroup ARMCM3_NVIC NVIC Support
 * @{
 * @brief ARM Cortex-M3 NVIC support.
 *
 * @ingroup ARMCM3
 */
/** @} */
